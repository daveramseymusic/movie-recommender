[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "movie-recommender",
    "section": "",
    "text": "This file will become your README and also the index of your documentation."
  },
  {
    "objectID": "index.html#install",
    "href": "index.html#install",
    "title": "movie-recommender",
    "section": "Install",
    "text": "Install\npip install movie_recommender"
  },
  {
    "objectID": "index.html#how-to-use",
    "href": "index.html#how-to-use",
    "title": "movie-recommender",
    "section": "How to use",
    "text": "How to use\nThis lib provides a get_movie_recs function to get movie recommendations similar to the movie saved in the full_title variable.\n\nget_movie_recs(full_title='Beasts of the Southern Wild (2012)',learn=learn,titles=titles)\n\n['Beasts of the Southern Wild (2012)',\n 'Mina Tannenbaum (1994)',\n 'Triplets of Belleville, The (Les triplettes de Belleville) (2003)',\n 'Chasing Mavericks (2012)',\n 'Bye Bye Brazil (Bye Bye Brasil) (1980)',\n \"Tale of Winter, A (a.k.a. A Winter's Tale) (Conte d'hiver) (1992)\",\n 'Coonskin (1975)',\n 'Nanny, The (1965)',\n 'Trials of Henry Kissinger, The (2002)',\n 'Rain Fall (2009)',\n 'Hail, Caesar! (2016)',\n 'Freeway (1996)',\n 'Phantom Boy (2015)',\n 'The Attic (2008)',\n 'James and the Giant Peach (1996)',\n 'Song of the Sea (2014)',\n 'Bitter Tears of Petra von Kant, The (bitteren Tränen der Petra von Kant, Die) (1972)',\n 'The Ballad of Buster Scruggs (2018)',\n 'Bank Dick, The (1940)',\n 'Salvador (1986)',\n 'Go-Getter, The (2007)',\n 'Raining Stones (1993)',\n 'Easy Street (1917)',\n 'Scarlet Diva (2000)',\n 'Kings of Summer, The (2013)',\n 'My Side of the Mountain (1969)',\n 'Nashville (1975)',\n 'Fantastic Mr. Fox (2009)',\n 'After the Rehearsal (Efter repetitionen) (1984)',\n 'Touchy Feely (2013)']"
  },
  {
    "objectID": "movie_recommender.html",
    "href": "movie_recommender.html",
    "title": "FastAI Movie Recommender Step-by-Step",
    "section": "",
    "text": "Load model and data loaders or movie title csv\nThe dataloaders we used to train the model from the 9 million reviews were 200MB so we use a csv instead. To convert from data loaders to pandas DataFrame use code hashtagged out just below\n\n# titles = pd.DataFrame(dls.classes['title']).reset_index() #create df from data loaders(dls)\n# titles = titles.rename(columns={'index':'midx',0:'title'}) # rename columns\n\n\n#load the model and movie titles with indexes (from the previous data loaders)\npath = Path('../models_and_dls')\nlearn = load_learner(path/'movie_predictor_large20mil_639.pkl')\ntitles = pd.read_csv(path/'movie_20mil_dls.csv')\n\n\n\nFunctions for Model Inference\n\nsource\n\nget_movie_recs\n\n get_movie_recs (full_title:str, learn, titles)\n\nThis function will use the nn.CosineSimilarity on the 50 latent factors for each movie to find the 30 movies most similar to your favorite movie.\n\n\n\n\nType\nDetails\n\n\n\n\nfull_title\nstr\nString saved to favorite_movie variable\n\n\nlearn\n\nTrained Model\n\n\ntitles\n\nDataFrame with all movie titles from dls\n\n\n\n\nsource\n\n\nsearch_movies_n_recommend\n\n search_movies_n_recommend (favorite_movie:str, learn, titles)\n\nThis function returns 30 recommendations using get_movie_recs after searching through all movie titles to find any titles that contain the words in the favorite_movie variable.\n\n\n\n\n\n\n\n\n\nType\nDetails\n\n\n\n\nfavorite_movie\nstr\nThe movie title typed into the gr.Textbox() that the user will see on the gradio app\n\n\nlearn\n\nTrained model\n\n\ntitles\n\nMovie titles df\n\n\n\n\n\n\nGradio For Publishing the Model\n\nNow we use gr.Interface() to create a block that contains our search_movies_n_recommend fuction as well as variables that dictate what will be shown once we publish it on gradio\n\n\nintf = gr.Interface(fn=search_movies_n_recommend,\n                    inputs=gr.Textbox(lines=1,placeholder=\"Put Your Favorite Movie Here To See Similar Movie Recommendations...\"),\n                    outputs=[\"text\",\"text\"],\n                    examples=['Child\\'s Play (1988)','Rushmore','brothers Bloom',\n                              'call me by your name', 'Jumanji (1995)','The Three Amigos'],\n                    title=\"Dave's Fast.AI Movie Recommender\",\n                    article='This recommender uses a collaborative filtering model fashioned from the [Fast.AI](https://github.com/fastai/fastbook/blob/master/08_collab.ipynb) library and trained on the 9 million movie reviews from the [Movie Lense Dataset](https://grouplens.org/datasets/movielens/25m/).  It trains Latent Factors to give movies and users descriptive weights that help predict thier reivews based on these factors.  The model was trained completely WITHOUT titles, descriptions, or categories and amazingly these things can be added to imporove this model.  Enjoy!'                    )\n\n\n\nActually Try the Model HERE\n\nNow we launch it so it can be used literally here in the jupyter notebook\n\n\nintf.launch(inline=True, #when True publishes the page in notebook\n    share=False) #when True automatically publishes the app to the gradio website for 72 hours.\n\nRunning on local URL:  http://127.0.0.1:7861\n\nTo create a public link, set `share=True` in `launch()`.\n\n\n\n\n\n(<gradio.routes.App>, 'http://127.0.0.1:7861/', None)\n\n\n\n\nExample Without Gradio:\n\nHere is an example of the model being used straight from the get_movie_recs function, recommending movies similar to one of my favorites.\n\n\nfavorite_movie = 'Beasts of the Southern Wild (2012)'\n\nget_movie_recs(full_title=favorite_movie, learn=learn, titles=titles)\n\n['Beasts of the Southern Wild (2012)',\n 'Mina Tannenbaum (1994)',\n 'Triplets of Belleville, The (Les triplettes de Belleville) (2003)',\n 'Chasing Mavericks (2012)',\n 'Bye Bye Brazil (Bye Bye Brasil) (1980)',\n \"Tale of Winter, A (a.k.a. A Winter's Tale) (Conte d'hiver) (1992)\",\n 'Coonskin (1975)',\n 'Nanny, The (1965)',\n 'Trials of Henry Kissinger, The (2002)',\n 'Rain Fall (2009)',\n 'Hail, Caesar! (2016)',\n 'Freeway (1996)',\n 'Phantom Boy (2015)',\n 'The Attic (2008)',\n 'James and the Giant Peach (1996)',\n 'Song of the Sea (2014)',\n 'Bitter Tears of Petra von Kant, The (bitteren Tränen der Petra von Kant, Die) (1972)',\n 'The Ballad of Buster Scruggs (2018)',\n 'Bank Dick, The (1940)',\n 'Salvador (1986)',\n 'Go-Getter, The (2007)',\n 'Raining Stones (1993)',\n 'Easy Street (1917)',\n 'Scarlet Diva (2000)',\n 'Kings of Summer, The (2013)',\n 'My Side of the Mountain (1969)',\n 'Nashville (1975)',\n 'Fantastic Mr. Fox (2009)',\n 'After the Rehearsal (Efter repetitionen) (1984)',\n 'Touchy Feely (2013)']"
  }
]